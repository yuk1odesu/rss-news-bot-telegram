import os
import feedparser
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RSS-–∫–∞–Ω–∞–ª–æ–≤
RSS_FEEDS = {
    "general": os.getenv("RSS_GENERAL"),
    "technology": os.getenv("RSS_TECHNOLOGY"),
    "sports": os.getenv("RSS_SPORTS"),
    "health": os.getenv("RSS_HEALTH"),
    "entertainment": os.getenv("RSS_ENTERTAINMENT")
}

# –ë–æ—Ç
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
CATEGORIES = {
    "general": "üåç World news",
    "technology": "üß© Technology",
    "sports": "‚öΩ Sports",
    "health": "ü©∫ Health",
    "entertainment": "üé¨ Gaming"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
def get_rss_news(category="general"):
    rss_url = RSS_FEEDS.get(category)
    if not rss_url:
        print(f"[–û—à–∏–±–∫–∞] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
        return []

    print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å –∫ RSS: {rss_url}")

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0 Safari/537.36"
    }

    try:
        response = requests.get(rss_url, headers=headers, timeout=10)
        print(f"[DEBUG] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")

        if response.status_code != 200:
            return []

        feed = feedparser.parse(response.content)
        entries = feed.entries[:5]

        if not entries:
            print("[–û—à–∏–±–∫–∞] –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≤ RSS-–∫–∞–Ω–∞–ª–µ")
            return []

        print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ {len(entries)} –Ω–æ–≤–æ—Å—Ç–µ–π")

        return [
            {
                "title": entry.title,
                "url": entry.link,
                "published": entry.published if hasattr(entry, "published") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }
            for entry in entries
        ]

    except Exception as e:
        print("[–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ RSS]:", str(e))
        return []


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û–±–Ω–æ–≤–∏—Ç—å" –∏ "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
def get_news_keyboard(category):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ Update feed", callback_data=f"rss_{category}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è Choose another subreddit", callback_data="back_to_categories")]
    ])


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command(commands=["start"]))
async def start(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"rss_{topic}")]
        for topic, name in CATEGORIES.items()
    ])
    await message.answer("üì∞ Hello there! Choose the subreddit:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("rss_"))
async def send_news(callback: CallbackQuery):
    category = callback.data.replace("rss_", "")
    news_list = get_rss_news(category)

    if not news_list:
        await callback.message.answer("‚ùå Unable to load the news.")
        return

    result = f"üóû –ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ ¬´{CATEGORIES[category]}¬ª:\n\n"
    for i, news in enumerate(news_list, start=1):
        result += f"{i}. {news['title']}\n–î–∞—Ç–∞: {news['published']}\nüîó {news['url']}\n\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.edit_text(result, reply_markup=get_news_keyboard(category))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
@dp.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"rss_{topic}")]
        for topic, name in CATEGORIES.items()
    ])
    await callback.message.edit_text("üì∞ Choose your subreddit:", reply_markup=keyboard)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    import requests

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    dp.run_polling(bot)